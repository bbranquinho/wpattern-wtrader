/** RDDL Parser: Definitive Lexical Patterns for Tokens (for use with JLex)  
 * 
 *  @author Scott Sanner (ssanner@gmail.com)
 */
package rddl.parser;
import java_cup.runtime.Symbol;


class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

public int yyline() { return yyline; } 
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int yy_state_dtrans[] = {
		0
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NO_ANCHOR,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NOT_ACCEPT,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NO_ANCHOR,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NO_ANCHOR,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NO_ANCHOR,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NO_ANCHOR,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NO_ANCHOR,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NO_ANCHOR,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NO_ANCHOR,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NO_ANCHOR,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NO_ANCHOR,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NO_ANCHOR,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NO_ANCHOR,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NO_ANCHOR,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NO_ANCHOR,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NO_ANCHOR,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NO_ANCHOR,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NO_ANCHOR,
		/* 156 */ YY_NO_ANCHOR,
		/* 157 */ YY_NO_ANCHOR,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NO_ANCHOR,
		/* 160 */ YY_NO_ANCHOR,
		/* 161 */ YY_NO_ANCHOR,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NO_ANCHOR,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NO_ANCHOR,
		/* 166 */ YY_NO_ANCHOR,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NO_ANCHOR,
		/* 169 */ YY_NO_ANCHOR,
		/* 170 */ YY_NO_ANCHOR,
		/* 171 */ YY_NO_ANCHOR,
		/* 172 */ YY_NO_ANCHOR,
		/* 173 */ YY_NO_ANCHOR,
		/* 174 */ YY_NO_ANCHOR,
		/* 175 */ YY_NO_ANCHOR,
		/* 176 */ YY_NO_ANCHOR,
		/* 177 */ YY_NO_ANCHOR,
		/* 178 */ YY_NO_ANCHOR,
		/* 179 */ YY_NO_ANCHOR,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NO_ANCHOR,
		/* 182 */ YY_NO_ANCHOR,
		/* 183 */ YY_NO_ANCHOR,
		/* 184 */ YY_NO_ANCHOR,
		/* 185 */ YY_NO_ANCHOR,
		/* 186 */ YY_NO_ANCHOR,
		/* 187 */ YY_NO_ANCHOR,
		/* 188 */ YY_NO_ANCHOR,
		/* 189 */ YY_NO_ANCHOR,
		/* 190 */ YY_NO_ANCHOR,
		/* 191 */ YY_NO_ANCHOR,
		/* 192 */ YY_NO_ANCHOR,
		/* 193 */ YY_NO_ANCHOR,
		/* 194 */ YY_NO_ANCHOR,
		/* 195 */ YY_NO_ANCHOR,
		/* 196 */ YY_NO_ANCHOR,
		/* 197 */ YY_NO_ANCHOR,
		/* 198 */ YY_NO_ANCHOR,
		/* 199 */ YY_NO_ANCHOR,
		/* 200 */ YY_NO_ANCHOR,
		/* 201 */ YY_NO_ANCHOR,
		/* 202 */ YY_NO_ANCHOR,
		/* 203 */ YY_NO_ANCHOR,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NO_ANCHOR,
		/* 207 */ YY_NO_ANCHOR,
		/* 208 */ YY_NO_ANCHOR,
		/* 209 */ YY_NO_ANCHOR,
		/* 210 */ YY_NO_ANCHOR,
		/* 211 */ YY_NO_ANCHOR,
		/* 212 */ YY_NO_ANCHOR,
		/* 213 */ YY_NO_ANCHOR,
		/* 214 */ YY_NO_ANCHOR,
		/* 215 */ YY_NO_ANCHOR,
		/* 216 */ YY_NO_ANCHOR,
		/* 217 */ YY_NO_ANCHOR,
		/* 218 */ YY_NO_ANCHOR,
		/* 219 */ YY_NO_ANCHOR,
		/* 220 */ YY_NO_ANCHOR,
		/* 221 */ YY_NO_ANCHOR,
		/* 222 */ YY_NO_ANCHOR,
		/* 223 */ YY_NO_ANCHOR,
		/* 224 */ YY_NO_ANCHOR,
		/* 225 */ YY_NO_ANCHOR,
		/* 226 */ YY_NO_ANCHOR,
		/* 227 */ YY_NO_ANCHOR,
		/* 228 */ YY_NO_ANCHOR,
		/* 229 */ YY_NO_ANCHOR,
		/* 230 */ YY_NO_ANCHOR,
		/* 231 */ YY_NO_ANCHOR,
		/* 232 */ YY_NO_ANCHOR,
		/* 233 */ YY_NO_ANCHOR,
		/* 234 */ YY_NO_ANCHOR,
		/* 235 */ YY_NO_ANCHOR,
		/* 236 */ YY_NO_ANCHOR,
		/* 237 */ YY_NO_ANCHOR,
		/* 238 */ YY_NO_ANCHOR,
		/* 239 */ YY_NO_ANCHOR,
		/* 240 */ YY_NO_ANCHOR,
		/* 241 */ YY_NO_ANCHOR,
		/* 242 */ YY_NO_ANCHOR,
		/* 243 */ YY_NO_ANCHOR,
		/* 244 */ YY_NO_ANCHOR,
		/* 245 */ YY_NO_ANCHOR,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NO_ANCHOR,
		/* 248 */ YY_NO_ANCHOR,
		/* 249 */ YY_NO_ANCHOR,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NO_ANCHOR,
		/* 252 */ YY_NO_ANCHOR,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NO_ANCHOR,
		/* 255 */ YY_NOT_ACCEPT,
		/* 256 */ YY_NO_ANCHOR,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NO_ANCHOR,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NO_ANCHOR,
		/* 261 */ YY_NOT_ACCEPT,
		/* 262 */ YY_NO_ANCHOR,
		/* 263 */ YY_NOT_ACCEPT,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NOT_ACCEPT,
		/* 266 */ YY_NO_ANCHOR,
		/* 267 */ YY_NO_ANCHOR,
		/* 268 */ YY_NO_ANCHOR,
		/* 269 */ YY_NO_ANCHOR,
		/* 270 */ YY_NO_ANCHOR,
		/* 271 */ YY_NO_ANCHOR,
		/* 272 */ YY_NO_ANCHOR,
		/* 273 */ YY_NO_ANCHOR,
		/* 274 */ YY_NO_ANCHOR,
		/* 275 */ YY_NO_ANCHOR,
		/* 276 */ YY_NO_ANCHOR,
		/* 277 */ YY_NO_ANCHOR,
		/* 278 */ YY_NO_ANCHOR,
		/* 279 */ YY_NO_ANCHOR,
		/* 280 */ YY_NO_ANCHOR,
		/* 281 */ YY_NO_ANCHOR,
		/* 282 */ YY_NO_ANCHOR,
		/* 283 */ YY_NO_ANCHOR,
		/* 284 */ YY_NO_ANCHOR,
		/* 285 */ YY_NO_ANCHOR,
		/* 286 */ YY_NO_ANCHOR,
		/* 287 */ YY_NO_ANCHOR,
		/* 288 */ YY_NO_ANCHOR,
		/* 289 */ YY_NO_ANCHOR,
		/* 290 */ YY_NO_ANCHOR,
		/* 291 */ YY_NO_ANCHOR,
		/* 292 */ YY_NO_ANCHOR,
		/* 293 */ YY_NO_ANCHOR,
		/* 294 */ YY_NO_ANCHOR,
		/* 295 */ YY_NO_ANCHOR,
		/* 296 */ YY_NO_ANCHOR,
		/* 297 */ YY_NO_ANCHOR,
		/* 298 */ YY_NO_ANCHOR,
		/* 299 */ YY_NO_ANCHOR,
		/* 300 */ YY_NO_ANCHOR,
		/* 301 */ YY_NO_ANCHOR,
		/* 302 */ YY_NO_ANCHOR,
		/* 303 */ YY_NO_ANCHOR,
		/* 304 */ YY_NO_ANCHOR,
		/* 305 */ YY_NO_ANCHOR,
		/* 306 */ YY_NO_ANCHOR,
		/* 307 */ YY_NO_ANCHOR,
		/* 308 */ YY_NO_ANCHOR,
		/* 309 */ YY_NO_ANCHOR,
		/* 310 */ YY_NO_ANCHOR,
		/* 311 */ YY_NO_ANCHOR,
		/* 312 */ YY_NO_ANCHOR,
		/* 313 */ YY_NO_ANCHOR,
		/* 314 */ YY_NO_ANCHOR,
		/* 315 */ YY_NO_ANCHOR,
		/* 316 */ YY_NO_ANCHOR,
		/* 317 */ YY_NO_ANCHOR,
		/* 318 */ YY_NO_ANCHOR,
		/* 319 */ YY_NO_ANCHOR,
		/* 320 */ YY_NO_ANCHOR,
		/* 321 */ YY_NO_ANCHOR,
		/* 322 */ YY_NO_ANCHOR,
		/* 323 */ YY_NO_ANCHOR,
		/* 324 */ YY_NO_ANCHOR,
		/* 325 */ YY_NO_ANCHOR,
		/* 326 */ YY_NO_ANCHOR,
		/* 327 */ YY_NO_ANCHOR,
		/* 328 */ YY_NO_ANCHOR,
		/* 329 */ YY_NO_ANCHOR,
		/* 330 */ YY_NO_ANCHOR,
		/* 331 */ YY_NO_ANCHOR,
		/* 332 */ YY_NO_ANCHOR,
		/* 333 */ YY_NO_ANCHOR,
		/* 334 */ YY_NO_ANCHOR,
		/* 335 */ YY_NO_ANCHOR,
		/* 336 */ YY_NO_ANCHOR,
		/* 337 */ YY_NO_ANCHOR,
		/* 338 */ YY_NO_ANCHOR,
		/* 339 */ YY_NO_ANCHOR,
		/* 340 */ YY_NO_ANCHOR,
		/* 341 */ YY_NO_ANCHOR,
		/* 342 */ YY_NO_ANCHOR,
		/* 343 */ YY_NO_ANCHOR,
		/* 344 */ YY_NO_ANCHOR,
		/* 345 */ YY_NO_ANCHOR,
		/* 346 */ YY_NO_ANCHOR,
		/* 347 */ YY_NO_ANCHOR,
		/* 348 */ YY_NO_ANCHOR,
		/* 349 */ YY_NO_ANCHOR,
		/* 350 */ YY_NO_ANCHOR,
		/* 351 */ YY_NO_ANCHOR,
		/* 352 */ YY_NO_ANCHOR,
		/* 353 */ YY_NO_ANCHOR,
		/* 354 */ YY_NO_ANCHOR,
		/* 355 */ YY_NO_ANCHOR,
		/* 356 */ YY_NO_ANCHOR,
		/* 357 */ YY_NO_ANCHOR,
		/* 358 */ YY_NO_ANCHOR,
		/* 359 */ YY_NO_ANCHOR,
		/* 360 */ YY_NO_ANCHOR,
		/* 361 */ YY_NO_ANCHOR,
		/* 362 */ YY_NO_ANCHOR,
		/* 363 */ YY_NO_ANCHOR,
		/* 364 */ YY_NO_ANCHOR,
		/* 365 */ YY_NO_ANCHOR,
		/* 366 */ YY_NO_ANCHOR,
		/* 367 */ YY_NO_ANCHOR,
		/* 368 */ YY_NO_ANCHOR,
		/* 369 */ YY_NO_ANCHOR,
		/* 370 */ YY_NO_ANCHOR,
		/* 371 */ YY_NO_ANCHOR,
		/* 372 */ YY_NO_ANCHOR,
		/* 373 */ YY_NO_ANCHOR,
		/* 374 */ YY_NO_ANCHOR,
		/* 375 */ YY_NO_ANCHOR,
		/* 376 */ YY_NO_ANCHOR,
		/* 377 */ YY_NOT_ACCEPT,
		/* 378 */ YY_NO_ANCHOR,
		/* 379 */ YY_NO_ANCHOR,
		/* 380 */ YY_NO_ANCHOR,
		/* 381 */ YY_NO_ANCHOR,
		/* 382 */ YY_NO_ANCHOR,
		/* 383 */ YY_NO_ANCHOR,
		/* 384 */ YY_NO_ANCHOR,
		/* 385 */ YY_NO_ANCHOR,
		/* 386 */ YY_NO_ANCHOR,
		/* 387 */ YY_NO_ANCHOR,
		/* 388 */ YY_NO_ANCHOR,
		/* 389 */ YY_NO_ANCHOR,
		/* 390 */ YY_NO_ANCHOR,
		/* 391 */ YY_NO_ANCHOR,
		/* 392 */ YY_NO_ANCHOR,
		/* 393 */ YY_NO_ANCHOR,
		/* 394 */ YY_NO_ANCHOR,
		/* 395 */ YY_NO_ANCHOR,
		/* 396 */ YY_NO_ANCHOR,
		/* 397 */ YY_NO_ANCHOR,
		/* 398 */ YY_NO_ANCHOR,
		/* 399 */ YY_NOT_ACCEPT,
		/* 400 */ YY_NO_ANCHOR,
		/* 401 */ YY_NO_ANCHOR,
		/* 402 */ YY_NO_ANCHOR,
		/* 403 */ YY_NO_ANCHOR,
		/* 404 */ YY_NO_ANCHOR,
		/* 405 */ YY_NO_ANCHOR,
		/* 406 */ YY_NO_ANCHOR,
		/* 407 */ YY_NO_ANCHOR,
		/* 408 */ YY_NO_ANCHOR,
		/* 409 */ YY_NO_ANCHOR,
		/* 410 */ YY_NO_ANCHOR,
		/* 411 */ YY_NO_ANCHOR,
		/* 412 */ YY_NO_ANCHOR,
		/* 413 */ YY_NO_ANCHOR,
		/* 414 */ YY_NO_ANCHOR,
		/* 415 */ YY_NO_ANCHOR,
		/* 416 */ YY_NO_ANCHOR,
		/* 417 */ YY_NO_ANCHOR,
		/* 418 */ YY_NO_ANCHOR,
		/* 419 */ YY_NO_ANCHOR,
		/* 420 */ YY_NO_ANCHOR,
		/* 421 */ YY_NO_ANCHOR,
		/* 422 */ YY_NO_ANCHOR,
		/* 423 */ YY_NO_ANCHOR,
		/* 424 */ YY_NO_ANCHOR,
		/* 425 */ YY_NO_ANCHOR,
		/* 426 */ YY_NO_ANCHOR,
		/* 427 */ YY_NO_ANCHOR,
		/* 428 */ YY_NO_ANCHOR,
		/* 429 */ YY_NO_ANCHOR,
		/* 430 */ YY_NO_ANCHOR,
		/* 431 */ YY_NO_ANCHOR,
		/* 432 */ YY_NO_ANCHOR,
		/* 433 */ YY_NOT_ACCEPT,
		/* 434 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"2:8,65:2,66,2:2,66,2:18,65,2:3,58,2,60,63,44,45,43,42,49,19,48,1,62:10,56,5" +
"7,55,53,54,59,64,61,32,61,30,35,61,37,61:3,29,61,38,33,61,34,61:4,31,61,36," +
"61:3,51,2,52,39,50,2,6,17,11,3,12,26,25,13,7,18,61,24,5,8,4,21,20,14,9,10,1" +
"6,22,28,27,23,15,46,40,47,41,2:65409,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,435,
"0,1,2,1,3,1:3,4,1:6,5,1:4,6,7,8,1:3,9,1,10,11,12,13,1,5,1:3,14,9,15,16,1,13" +
":13,17,13:21,18,13:16,19,15,20,9,1,5,21,15,22,23,24,25,26,27,28,29,30,31,32" +
",33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57" +
",58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82" +
",83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105" +
",106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,12" +
"4,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,1" +
"43,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161," +
"162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180" +
",181,182,183,13,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198" +
",199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,21" +
"7,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,2" +
"36,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254," +
"255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273" +
",274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,29" +
"2,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,3" +
"11,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329," +
"330,331,332,333,334,335,336,337,13,338,339,340,341,342,343,344,345,346,347," +
"348,349,350,351,352")[0];

	private int yy_nxt[][] = unpackFromString(353,67,
"1,2,3,4,376,398,409,96,415,417,203,206,207,418,208,419:2,209,419,5,419,420," +
"419:2,252,419,254,419:2,421,422,423,424,425,426,427,428,256,429,6,7,8,9,10," +
"11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,419,28,3,95,29:2,-1:68,3" +
"0,-1:68,419,258,419:2,260,419:4,262,419:6,94,419:19,-1:11,94,-1:10,419,264," +
"98,-1:56,32,-1:75,33,-1:57,34,35,-1:65,36,-1:66,37,-1:16,38:16,97,38:19,-1:" +
"11,97,-1:10,38:2,-1:52,99,-1:13,28,-1:69,29:2,-1,30:65,-1:4,419:16,94,419:1" +
"9,-1:11,94,-1:10,419,264,98,-1:57,41,-1:15,39:16,101,39:19,-1:11,101,-1:10," +
"39:2,-1:7,419:9,412,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,62" +
",419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,80,419:9,94,419:19,-1" +
":11,94,-1:10,419,264,98,-1:6,419:16,94,419:19,-1:11,94,-1:10,419,264,-1:7,4" +
"19:5,100,419:10,94,419:6,31,419:12,-1:11,94,-1:10,419,264,98,-1:6,419:4,288" +
",419,382,40,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,42,419:10," +
"94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,43,419:6,94,419:19,-1:11,94," +
"-1:10,419,264,98,-1:6,419:6,44,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1" +
":6,419:9,45,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,46,419:9,9" +
"4,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,47,419:6,94,419:19,-1:11,94,-" +
"1:10,419,264,98,-1:6,419:16,94,419:4,48,419:14,-1:11,94,-1:10,419,264,98,-1" +
":6,419:16,94,419:4,49,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:6,50,419:9," +
"94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,51,419:14,-1:11,94" +
",-1:10,419,264,98,-1:6,419:9,52,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-" +
"1:6,419:3,53,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,54,419:1" +
"0,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,55,419:8,94,419:19,-1:11,9" +
"4,-1:10,419,264,98,-1:6,419:10,56,419:5,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:6,57,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,58,419:15,94," +
"419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,59,419:14,-1:11,94,-1" +
":10,419,264,98,-1:6,419:16,94,419:4,60,419:14,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:7,61,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,6" +
"3,419:12,-1:11,94,-1:10,419,264,98,-1:6,419:5,64,419:10,94,419:19,-1:11,94," +
"-1:10,419,264,98,-1:6,419:16,94,419:6,65,419:12,-1:11,94,-1:10,419,264,98,-" +
"1:6,419:2,66,419:13,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,67,419:1" +
"0,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,68,419:14,-1:11," +
"94,-1:10,419,264,98,-1:6,419:7,69,419:8,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:9,70,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,71,419:" +
"6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,72,419:6,94,419:19,-1:11,9" +
"4,-1:10,419,264,98,-1:6,419:3,73,419:12,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:7,74,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,75,419:" +
"11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,76,419:6,94,419:19,-1:11," +
"94,-1:10,419,264,98,-1:6,419:7,77,419:8,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:6,78,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,79,419:" +
"12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,81,419:14,-1:11" +
",94,-1:10,419,264,98,-1:6,419:16,94,419:4,82,419:14,-1:11,94,-1:10,419,264," +
"98,-1:6,419:7,83,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,84,41" +
"9:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,85,419:8,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:7,86,419:8,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419:7,87,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,88,419" +
":8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,89,419:10,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:6,90,419:9,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419:6,91,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,92,419" +
":9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,93,419:9,94,419:19,-1:11," +
"94,-1:10,419,264,98,-1:6,419:9,102,419:6,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419:4,173,419:11,94,419:19,-1:11,94,-1:10,419,264,-1:7,419:13,103,41" +
"9:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,104,419:12,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:6,105,419:9,94,419:19,-1:11,94,-1:10,419,26" +
"4,98,-1:6,419:16,94,419:6,106,419:12,-1:11,94,-1:10,419,264,98,-1:6,419:6,1" +
"07,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,108,419:12,94,292,4" +
"19:7,219,419:10,-1:11,94,-1:10,419,264,98,-1:6,419,109,419:14,94,419:19,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:9,110,419:6,94,419:19,-1:11,94,-1:10,419,26" +
"4,98,-1:6,419:9,111,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,11" +
"2,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:2,113,419:13,94,419:19" +
",-1:11,94,-1:10,419,264,98,-1:6,419:4,114,419:11,94,419:19,-1:11,94,-1:10,4" +
"19,264,98,-1:6,419:8,115,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419" +
":8,116,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,117,419:8,94,41" +
"9:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,118,419:4,94,419:19,-1:11,94,-1:" +
"10,419,264,98,-1:6,419:16,94,419:4,119,419:14,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:3,120,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4" +
",121,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:5,122,419:10,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419,123,419:14,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419:5,124,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,125" +
",419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,126,419:14,94,419:19,-1" +
":11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,127,419:14,-1:11,94,-1:10,419," +
"264,98,-1:6,419:5,128,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:8" +
",129,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,130,419:8,94,419:" +
"19,-1:11,94,-1:10,419,264,98,-1:6,419:6,131,419:9,94,419:19,-1:11,94,-1:10," +
"419,264,98,-1:6,419:7,132,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,41" +
"9:9,133,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,134," +
"419:14,-1:11,94,-1:10,419,264,98,-1:6,419:7,135,419:8,94,419:19,-1:11,94,-1" +
":10,419,264,98,-1:6,419:5,136,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1" +
":6,419:9,137,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,138,419:8" +
",94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,139,419:12,94,419:19,-1:11," +
"94,-1:10,419,264,98,-1:6,419:3,140,419:12,94,419:19,-1:11,94,-1:10,419,264," +
"98,-1:6,419:5,141,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,142" +
",419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,143,419:10,94,419:19," +
"-1:11,94,-1:10,419,264,98,-1:6,419:5,144,419:10,94,419:19,-1:11,94,-1:10,41" +
"9,264,98,-1:6,419:5,145,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419" +
":5,146,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,147,419:6,94,4" +
"19:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,148,419:8,94,419:19,-1:11,94,-1:" +
"10,419,264,98,-1:6,419:5,149,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:5,150,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,151,419:8" +
",94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,274,152,154,419:4,94,419:3," +
"210,419:15,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:8,247,419:10,-1:11," +
"94,-1:10,419,264,-1:7,419:4,175,419:11,94,419:19,-1:11,94,-1:10,419,264,-1:" +
"7,155,419:2,156,419:12,94,419,157,419:17,-1:11,94,-1:10,419,264,98,-1:6,419" +
":16,94,419:4,158,419:2,275,419:11,-1:11,94,-1:10,419,264,98,-1:6,419:9,159," +
"419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,160,419:14,94,419:19,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:16,94,419,161,419:17,-1:11,94,-1:10,419,264" +
",98,-1:6,419:16,94,419:2,162,419:16,-1:11,94,-1:10,419,264,98,-1:6,419:16,9" +
"4,419:4,163,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:2,164,419:13,94,419:1" +
"9,-1:11,94,-1:10,419,264,98,-1:6,419:3,165,419:12,94,419:19,-1:11,94,-1:10," +
"419,264,98,-1:6,419:9,166,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,41" +
"9:16,153,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,167,419:8,94,419:19,-1" +
":11,94,-1:10,419,264,98,-1:6,419:6,168,419:9,94,419:19,-1:11,94,-1:10,419,2" +
"64,98,-1:6,419:3,169,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16" +
",205,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,170,419:12,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:2,171,419:13,94,419:19,-1:11,94,-1:10,419,264" +
",98,-1:6,419:13,172,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:12,1" +
"74,419:3,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,176,419:14,94,419:19," +
"-1:11,94,-1:10,419,264,98,-1:6,419:6,177,419:9,94,419:19,-1:11,94,-1:10,419" +
",264,98,-1:6,419:13,178,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:" +
"13,179,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,180,419:10,94,4" +
"19:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,181,419:6,94,419:19,-1:11,94,-1:" +
"10,419,264,98,-1:6,419:4,182,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:16,94,419:4,183,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4" +
",184,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,185,419:14,-1:11" +
",94,-1:10,419,264,98,-1:6,419:3,186,419:12,94,419:19,-1:11,94,-1:10,419,264" +
",98,-1:6,419:9,187,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94" +
",419:4,188,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,189,419:14" +
",-1:11,94,-1:10,419,264,98,-1:6,419:4,190,419:11,94,419:19,-1:11,94,-1:10,4" +
"19,264,98,-1:6,419:4,191,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,41" +
"9:9,192,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,193,419:10,94," +
"419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,194,419:6,94,419:19,-1:11,94,-1" +
":10,419,264,98,-1:6,419:9,195,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:9,196,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,197,419:6," +
"94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:10,198,419:5,94,419:19,-1:11,9" +
"4,-1:10,419,264,98,-1:6,419:5,199,419:10,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419,200,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,201,419:" +
"14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,202,419:10,94,419:19,-1:1" +
"1,94,-1:10,419,264,98,-1:6,419:9,211,419:6,94,419:19,-1:11,94,-1:10,419,264" +
",98,-1:6,419:5,312,419:10,94,419:19,-1:11,94,-1:10,419,264,-1:7,419,277,419" +
",212,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,314,41" +
"9:12,-1:11,94,-1:10,419,264,-1:7,419:3,213,419:12,94,419:19,-1:11,94,-1:10," +
"419,264,98,-1:6,419:6,326,419:9,94,419:19,-1:11,94,-1:10,419,264,-1:7,419:2" +
",214,419:13,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,332,333,419:11,9" +
"4,419:6,334,419:12,-1:11,94,-1:10,419,264,-1:7,419:6,284,419:9,94,419:19,-1" +
":11,94,-1:10,419,264,98,-1:6,419:16,94,419,340,419:4,408,419:12,-1:11,94,-1" +
":10,419,264,-1:7,419:11,410,419:4,94,419:6,285,419:12,-1:11,94,-1:10,419,26" +
"4,98,-1:6,419:3,360,419:12,94,419:19,-1:11,94,-1:10,419,264,-1:7,419:8,367," +
"419:7,94,419:19,-1:11,94,-1:10,419,264,-1:7,419:10,286,419:5,94,419:19,-1:1" +
"1,94,-1:10,419,264,98,-1:6,419:6,430,419:8,215,94,419:19,-1:11,94,-1:10,419" +
",264,98,-1:6,419:16,94,419:7,287,419:11,-1:11,94,-1:10,419,264,98,-1:6,419:" +
"7,416,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,289,419:10,94,41" +
"9:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:5,216,419:13,-1:11,94,-1:" +
"10,419,264,98,-1:6,419:3,402,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:4,217,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,290,419:" +
"4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,218,419:11,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:6,220,419:9,94,419:19,-1:11,94,-1:10,419,264," +
"98,-1:6,419:11,221,419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,294,4" +
"19:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:6,381,419:4,295,419:4,94" +
",419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,296,419:11,94,419:19,-1:11,94," +
"-1:10,419,264,98,-1:6,419:11,222,419:4,94,419:19,-1:11,94,-1:10,419,264,98," +
"-1:6,419:16,94,419,298,419:17,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:" +
"4,411,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:8,300,419:7,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:3,223,419:12,94,419:19,-1:11,94,-1:10,419,264" +
",98,-1:6,419:9,384,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,25" +
"3,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,302,419:8,94,419:19,-1:11,94," +
"-1:10,419,264,98,-1:6,419:16,255,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:" +
"2,305,419:13,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,224,419:11,94,4" +
"19:19,-1:11,94,-1:10,419,264,98,-1:6,419:13,388,419:2,94,419:19,-1:11,94,-1" +
":10,419,264,98,-1:6,419:11,405,419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1" +
":6,419:5,306,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,308,389," +
"419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,225,419:12," +
"-1:11,94,-1:10,419,264,98,-1:6,419:6,226,419:9,94,419:19,-1:11,94,-1:10,419" +
",264,98,-1:6,419,309,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:14" +
",227,419,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,228,419:14,94,419:19," +
"-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:2,387,419:16,-1:11,94,-1:10,41" +
"9,264,98,-1:6,419:16,257,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,229,41" +
"9:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,315,419:6,94,419:19,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:4,406,419:11,94,419:19,-1:11,94,-1:10,419,2" +
"64,98,-1:6,419:16,94,419:10,318,419:8,-1:11,94,-1:10,419,264,98,-1:6,419:11" +
",230,419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:8,319,419:7,94,419:" +
"19,-1:11,94,-1:10,419,264,98,-1:6,419:5,322,419:10,94,419:19,-1:11,94,-1:10" +
",419,264,98,-1:6,419:16,94,419:8,231,419:10,-1:11,94,-1:10,419,264,98,-1:6," +
"419:16,94,419:2,383,419:16,-1:11,94,-1:10,419,264,98,-1:6,419,393,419:14,94" +
",419:19,-1:11,94,-1:10,419,264,98,-1:6,419:2,434,419:13,94,419:19,-1:11,94," +
"-1:10,419,264,98,-1:6,419:16,94,419:4,327,419:14,-1:11,94,-1:10,419,264,98," +
"-1:6,419:16,259,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,392,419:4,94,4" +
"19:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,328,419:12,94,419:19,-1:11,94,-1" +
":10,419,264,98,-1:6,419:9,232,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:" +
"6,419:16,94,419:10,329,419:8,-1:11,94,-1:10,419,264,98,-1:6,419:10,233,419:" +
"5,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:13,234,419:2,94,419:19,-1:11" +
",94,-1:10,419,264,98,-1:6,419:9,407,419:6,94,419:19,-1:11,94,-1:10,419,264," +
"98,-1:6,419:5,330,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,403,419:1" +
"5,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,261,419:19,-1:11,94,-1:10" +
",419,264,98,-1:6,419:7,235,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,4" +
"19:13,236,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:14,237,419,94," +
"419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,238,419:6,94,419:19,-1:11,94,-1" +
":10,419,264,98,-1:6,419,338,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6" +
",339,419:15,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:8,395,419:7,94,419" +
":19,-1:11,94,-1:10,419,264,98,-1:6,419:5,341,419:10,94,419:19,-1:11,94,-1:1" +
"0,419,264,98,-1:6,419:16,94,419:4,342,419:14,-1:11,94,-1:10,419,264,98,-1:6" +
",419:7,396,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:2,343,419:13," +
"94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,239,419:8,94,419:19,-1:11,94" +
",-1:10,419,264,98,-1:6,419:2,240,419:13,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:9,346,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,347,4" +
"19:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:2,351,419:16,-1" +
":11,94,-1:10,419,264,98,-1:6,419:13,241,419:2,94,419:19,-1:11,94,-1:10,419," +
"264,98,-1:6,419:9,242,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16" +
",94,419:4,353,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:13,243,419:2,94,419" +
":19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,354,419:12,-1:11,94,-1:1" +
"0,419,264,98,-1:6,419:9,355,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:13,244,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:13,245,419:2," +
"94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,356,419:11,94,419:19,-1:11,9" +
"4,-1:10,419,264,98,-1:6,419:3,357,419:12,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419:16,204,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:13,246,419:2,94" +
",419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,263,419:19,-1:11,94,-1:10,419" +
",264,98,-1:6,419:8,432,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,3" +
"58,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,359,419:4,94,419:" +
"19,-1:11,94,-1:10,419,264,98,-1:6,419:5,361,419:10,94,419:19,-1:11,94,-1:10" +
",419,264,98,-1:6,419:4,362,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:8,363,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,265,419:19," +
"-1:11,94,-1:10,419,264,98,-1:6,419:3,248,419:12,94,419:19,-1:11,94,-1:10,41" +
"9,264,98,-1:6,419:7,365,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,366," +
"419:15,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,249,419:11,94,419:19," +
"-1:11,94,-1:10,419,264,98,-1:6,419:4,368,419:11,94,419:19,-1:11,94,-1:10,41" +
"9,264,98,-1:6,419,369,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7" +
",370,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,371,419:10,94,419" +
":19,-1:11,94,-1:10,419,264,98,-1:6,419:4,250,419:11,94,419:19,-1:11,94,-1:1" +
"0,419,264,98,-1:6,419:6,372,419:9,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:7,373,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,374,419:4,9" +
"4,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,375,419:12,94,419:19,-1:11,94" +
",-1:10,419,264,98,-1:6,419:4,251,419:11,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:7,266,419:6,267,419,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:" +
"16,94,419:6,394,419:12,-1:11,94,-1:10,419,264,-1:7,419:3,293,419:12,94,419:" +
"19,-1:11,94,-1:10,419,264,98,-1:6,419:11,291,419:4,94,419:19,-1:11,94,-1:10" +
",419,264,98,-1:6,419:4,297,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:8,307,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,303,419:8,94" +
",419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,377,419:19,-1:11,94,-1:10,419" +
",264,98,-1:6,419:11,310,419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:" +
"5,386,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,321,419:14,94,419" +
":19,-1:11,94,-1:10,419,264,98,-1:6,419:9,324,419:6,94,419:19,-1:11,94,-1:10" +
",419,264,98,-1:6,419:4,316,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:8,320,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,325,419:10,9" +
"4,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,335,419:12,94,419:19,-1:11,94" +
",-1:10,419,264,98,-1:6,419:9,336,419:6,94,419:19,-1:11,94,-1:10,419,264,98," +
"-1:6,419:5,331,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,41" +
"9:4,345,419:14,-1:11,94,-1:10,419,264,98,-1:6,419:7,350,419:8,94,419:19,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:9,352,419:6,94,419:19,-1:11,94,-1:10,419,26" +
"4,98,-1:6,419:5,364,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:3,2" +
"68,419:12,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:6,344,419:" +
"12,-1:11,94,-1:10,419,264,-1:7,419:11,385,419:4,94,419:19,-1:11,94,-1:10,41" +
"9,264,98,-1:6,419:4,299,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419" +
":7,304,419:8,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,399,419:19,-1:" +
"11,94,-1:10,419,264,98,-1:6,419:11,311,419:4,94,419:19,-1:11,94,-1:10,419,2" +
"64,98,-1:6,419:4,317,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5," +
"391,419:10,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,337,419:10,94,419" +
":19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:4,348,419:14,-1:11,94,-1:1" +
"0,419,264,98,-1:6,419:8,269,419:7,94,419:19,-1:11,94,-1:10,419,264,98,-1:6," +
"419:4,301,419:11,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,413,419:8,9" +
"4,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:11,313,419:4,94,419:19,-1:11,94" +
",-1:10,419,264,98,-1:6,419:4,323,419:11,94,419:19,-1:11,94,-1:10,419,264,98" +
",-1:6,419:16,94,419:4,349,419:14,-1:11,94,-1:10,419,264,98,-1:6,419,270,419" +
":7,271,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,431,419:11,94,4" +
"19:19,-1:11,94,-1:10,419,264,98,-1:6,419:7,272,419:8,94,419:8,273,419:10,-1" +
":11,94,-1:10,419,264,98,-1:6,419,379,419:14,94,419:19,-1:11,94,-1:10,419,26" +
"4,98,-1:6,419,276,419:14,94,419:2,378,419:16,-1:11,94,-1:10,419,264,98,-1:6" +
",419:11,278,419:4,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:4,279,419:11" +
",94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:5,280,419:10,94,419:19,-1:11," +
"94,-1:10,419,264,98,-1:6,419:9,400,419:6,94,419:19,-1:11,94,-1:10,419,264,9" +
"8,-1:6,419,281,419:14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,380,419:" +
"14,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:16,94,419:7,282,419:11,-1:1" +
"1,94,-1:10,419,264,98,-1:6,419:9,401,419:6,94,419:19,-1:11,94,-1:10,419,264" +
",98,-1:6,419:13,283,419:2,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419:9,40" +
"4,419:6,94,419:19,-1:11,94,-1:10,419,264,98,-1:6,419,390,419:14,94,419:19,-" +
"1:11,94,-1:10,419,264,98,-1:6,419,397,419:14,94,419:19,-1:11,94,-1:10,419,2" +
"64,98,-1:6,419:16,94,419:6,414,419:12,-1:11,94,-1:10,419,264,-1:7,419:16,43" +
"3,419:19,-1:11,94,-1:10,419,264,98,-1:3");

	public Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
  
	return new Symbol(sym.EOF, "[End of file reached]"); 
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym.DIV, yytext()); }
					case -3:
						break;
					case 3:
						{ System.err.println("Illegal character: "+yytext()+" at line "+(yyline()+1)); if (yytext().equals("'")) System.err.println("Note that ' comes before a parameter list as in var'(?x,?y)"); System.exit(1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -5:
						break;
					case 5:
						{ return new Symbol(sym.MINUS, yytext()); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym.AND, yytext()); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym.OR, yytext()); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym.NOT, yytext()); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym.PLUS, yytext()); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym.TIMES, yytext()); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym.LPAREN, yytext()); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym.RPAREN, yytext()); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym.LCURLY, yytext()); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym.RCURLY, yytext()); }
					case -15:
						break;
					case 15:
						{ return new Symbol(sym.DOT, yytext()); }
					case -16:
						break;
					case 16:
						{ return new Symbol(sym.COMMA, yytext()); }
					case -17:
						break;
					case 17:
						{ return new Symbol(sym.UNDERSCORE, yytext()); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym.LBRACK, yytext()); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym.RBRACK, yytext()); }
					case -20:
						break;
					case 20:
						{ return new Symbol(sym.ASSIGN_EQUAL, yytext()); }
					case -21:
						break;
					case 21:
						{ return new Symbol(sym.GREATER, yytext()); }
					case -22:
						break;
					case 22:
						{ return new Symbol(sym.LESS, yytext()); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym.COLON, yytext()); }
					case -24:
						break;
					case 24:
						{ return new Symbol(sym.SEMI, yytext()); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym.DOLLAR_SIGN, yytext()); }
					case -26:
						break;
					case 26:
						{ return new Symbol(sym.QUESTION, yytext()); }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym.AMPERSAND, yytext()); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym.INTEGER, new Integer(yytext())); }
					case -29:
						break;
					case 29:
						{ /* ignore white space. */ }
					case -30:
						break;
					case 30:
						{ /* ignore comments */ }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym.IF, yytext()); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym.NEQ, yytext()); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym.DOUBLE, new Double(yytext())); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym.COMP_EQUAL, yytext()); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym.IMPLY, yytext()); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym.GREATEREQ, yytext()); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym.LESSEQ, yytext()); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym.VAR, yytext()); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym.ENUM_VAL, yytext()); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym.INT, yytext()); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym.EQUIV, yytext()); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym.THEN, yytext()); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym.TRUE, yytext()); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym.CDFS, yytext()); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym.CASE, yytext()); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym.CPFS, yytext()); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym.ELSE, yytext()); }
					case -48:
						break;
					case 48:
						{ return new Symbol(sym.REAL, yytext()); }
					case -49:
						break;
					case 49:
						{ return new Symbol(sym.BOOL, yytext()); }
					case -50:
						break;
					case 50:
						{ return new Symbol(sym.TYPES, yytext()); }
					case -51:
						break;
					case 51:
						{ return new Symbol(sym.LEVEL, yytext()); }
					case -52:
						break;
					case 52:
						{ return new Symbol(sym.FALSE, yytext()); }
					case -53:
						break;
					case 53:
						{ return new Symbol(sym.GAMMA, yytext()); }
					case -54:
						break;
					case 54:
						{ return new Symbol(sym.DOMAIN, yytext()); }
					case -55:
						break;
					case 55:
						{ return new Symbol(sym.OBJECT, yytext()); }
					case -56:
						break;
					case 56:
						{ return new Symbol(sym.SWITCH, yytext()); }
					case -57:
						break;
					case 57:
						{ return new Symbol(sym.EXISTS, yytext()); }
					case -58:
						break;
					case 58:
						{ return new Symbol(sym.REWARD, yytext()); }
					case -59:
						break;
					case 59:
						{ return new Symbol(sym.FORALL, yytext()); }
					case -60:
						break;
					case 60:
						{ return new Symbol(sym.NORMAL, yytext()); }
					case -61:
						break;
					case 61:
						{ return new Symbol(sym.DEFAULT, yytext()); }
					case -62:
						break;
					case 62:
						{ return new Symbol(sym.OBJECTS, yytext()); }
					case -63:
						break;
					case 63:
						{ return new Symbol(sym.NEG_INF, yytext()); }
					case -64:
						break;
					case 64:
						{ return new Symbol(sym.HORIZON, yytext()); }
					case -65:
						break;
					case 65:
						{ return new Symbol(sym.POS_INF, yytext()); }
					case -66:
						break;
					case 66:
						{ return new Symbol(sym.UNIFORM, yytext()); }
					case -67:
						break;
					case 67:
						{ return new Symbol(sym.POISSON, yytext()); }
					case -68:
						break;
					case 68:
						{ return new Symbol(sym.WEIBULL, yytext()); }
					case -69:
						break;
					case 69:
						{ return new Symbol(sym.DISCOUNT, yytext()); }
					case -70:
						break;
					case 70:
						{ return new Symbol(sym.INSTANCE, yytext()); }
					case -71:
						break;
					case 71:
						{ return new Symbol(sym.DISCRETE, yytext()); }
					case -72:
						break;
					case 72:
						{ return new Symbol(sym.OTHERWISE, yytext()); }
					case -73:
						break;
					case 73:
						{ return new Symbol(sym.KRON_DELTA, yytext()); }
					case -74:
						break;
					case 74:
						{ return new Symbol(sym.DIRICHLET, yytext()); }
					case -75:
						break;
					case 75:
						{ return new Symbol(sym.BERNOULLI, yytext()); }
					case -76:
						break;
					case 76:
						{ return new Symbol(sym.INIT_STATE, yytext()); }
					case -77:
						break;
					case 77:
						{ return new Symbol(sym.NON_FLUENT, yytext()); }
					case -78:
						break;
					case 78:
						{ return new Symbol(sym.PVARIABLES, yytext()); }
					case -79:
						break;
					case 79:
						{ return new Symbol(sym.DIRAC_DELTA, yytext()); }
					case -80:
						break;
					case 80:
						{ return new Symbol(sym.NON_FLUENTS, yytext()); }
					case -81:
						break;
					case 81:
						{ return new Symbol(sym.EXPONENTIAL, yytext()); }
					case -82:
						break;
					case 82:
						{ return new Symbol(sym.MULTINOMIAL, yytext()); }
					case -83:
						break;
					case 83:
						{ return new Symbol(sym.STATE, yytext()); }
					case -84:
						break;
					case 84:
						{ return new Symbol(sym.REQUIREMENTS, yytext()); }
					case -85:
						break;
					case 85:
						{ return new Symbol(sym.OBSERVATION, yytext()); }
					case -86:
						break;
					case 86:
						{ return new Symbol(sym.ACTION, yytext()); }
					case -87:
						break;
					case 87:
						{ return new Symbol(sym.INTERMEDIATE, yytext()); }
					case -88:
						break;
					case 88:
						{ return new Symbol(sym.DERIVED_FLUENT, yytext()); }
					case -89:
						break;
					case 89:
						{ return new Symbol(sym.TERMINATE_WHEN, yytext()); }
					case -90:
						break;
					case 90:
						{ return new Symbol(sym.STATE_INVARIANTS, yytext()); }
					case -91:
						break;
					case 91:
						{ return new Symbol(sym.MAX_NONDEF_ACTIONS, yytext()); }
					case -92:
						break;
					case 92:
						{ return new Symbol(sym.ACTION_PRECONDITIONS, yytext()); }
					case -93:
						break;
					case 93:
						{ return new Symbol(sym.STATE_ACTION_CONSTRAINTS, yytext()); }
					case -94:
						break;
					case 95:
						{ System.err.println("Illegal character: "+yytext()+" at line "+(yyline()+1)); if (yytext().equals("'")) System.err.println("Note that ' comes before a parameter list as in var'(?x,?y)"); System.exit(1); }
					case -95:
						break;
					case 96:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -96:
						break;
					case 98:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -97:
						break;
					case 100:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -98:
						break;
					case 102:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -99:
						break;
					case 103:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -100:
						break;
					case 104:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -101:
						break;
					case 105:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -102:
						break;
					case 106:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -103:
						break;
					case 107:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -104:
						break;
					case 108:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -105:
						break;
					case 109:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -106:
						break;
					case 110:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -107:
						break;
					case 111:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -108:
						break;
					case 112:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -109:
						break;
					case 113:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -110:
						break;
					case 114:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -111:
						break;
					case 115:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -112:
						break;
					case 116:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -113:
						break;
					case 117:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -114:
						break;
					case 118:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -115:
						break;
					case 119:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -116:
						break;
					case 120:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -117:
						break;
					case 121:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -118:
						break;
					case 122:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -119:
						break;
					case 123:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -120:
						break;
					case 124:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -121:
						break;
					case 125:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -122:
						break;
					case 126:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -123:
						break;
					case 127:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -124:
						break;
					case 128:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -125:
						break;
					case 129:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -126:
						break;
					case 130:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -127:
						break;
					case 131:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -128:
						break;
					case 132:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -129:
						break;
					case 133:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -130:
						break;
					case 134:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -131:
						break;
					case 135:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -132:
						break;
					case 136:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -133:
						break;
					case 137:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -134:
						break;
					case 138:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -135:
						break;
					case 139:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -136:
						break;
					case 140:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -137:
						break;
					case 141:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -138:
						break;
					case 142:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -139:
						break;
					case 143:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -140:
						break;
					case 144:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -141:
						break;
					case 145:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -142:
						break;
					case 146:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -143:
						break;
					case 147:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -144:
						break;
					case 148:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -145:
						break;
					case 149:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -146:
						break;
					case 150:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -147:
						break;
					case 151:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -148:
						break;
					case 152:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -149:
						break;
					case 154:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -150:
						break;
					case 155:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -151:
						break;
					case 156:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -152:
						break;
					case 157:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -153:
						break;
					case 158:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -154:
						break;
					case 159:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -155:
						break;
					case 160:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -156:
						break;
					case 161:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -157:
						break;
					case 162:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -158:
						break;
					case 163:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -159:
						break;
					case 164:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -160:
						break;
					case 165:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -161:
						break;
					case 166:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -162:
						break;
					case 167:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -163:
						break;
					case 168:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -164:
						break;
					case 169:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -165:
						break;
					case 170:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -166:
						break;
					case 171:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -167:
						break;
					case 172:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -168:
						break;
					case 173:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -169:
						break;
					case 174:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -170:
						break;
					case 175:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -171:
						break;
					case 176:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -172:
						break;
					case 177:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -173:
						break;
					case 178:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -174:
						break;
					case 179:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -175:
						break;
					case 180:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -176:
						break;
					case 181:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -177:
						break;
					case 182:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -178:
						break;
					case 183:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -179:
						break;
					case 184:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -180:
						break;
					case 185:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -181:
						break;
					case 186:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -182:
						break;
					case 187:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -183:
						break;
					case 188:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -184:
						break;
					case 189:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -185:
						break;
					case 190:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -186:
						break;
					case 191:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -187:
						break;
					case 192:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -188:
						break;
					case 193:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -189:
						break;
					case 194:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -190:
						break;
					case 195:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -191:
						break;
					case 196:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -192:
						break;
					case 197:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -193:
						break;
					case 198:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -194:
						break;
					case 199:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -195:
						break;
					case 200:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -196:
						break;
					case 201:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -197:
						break;
					case 202:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -198:
						break;
					case 203:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -199:
						break;
					case 206:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -200:
						break;
					case 207:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -201:
						break;
					case 208:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -202:
						break;
					case 209:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -203:
						break;
					case 210:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -204:
						break;
					case 211:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -205:
						break;
					case 212:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -206:
						break;
					case 213:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -207:
						break;
					case 214:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -208:
						break;
					case 215:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -209:
						break;
					case 216:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -210:
						break;
					case 217:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -211:
						break;
					case 218:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -212:
						break;
					case 219:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -213:
						break;
					case 220:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -214:
						break;
					case 221:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -215:
						break;
					case 222:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -216:
						break;
					case 223:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -217:
						break;
					case 224:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -218:
						break;
					case 225:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -219:
						break;
					case 226:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -220:
						break;
					case 227:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -221:
						break;
					case 228:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -222:
						break;
					case 229:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -223:
						break;
					case 230:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -224:
						break;
					case 231:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -225:
						break;
					case 232:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -226:
						break;
					case 233:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -227:
						break;
					case 234:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -228:
						break;
					case 235:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -229:
						break;
					case 236:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -230:
						break;
					case 237:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -231:
						break;
					case 238:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -232:
						break;
					case 239:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -233:
						break;
					case 240:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -234:
						break;
					case 241:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -235:
						break;
					case 242:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -236:
						break;
					case 243:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -237:
						break;
					case 244:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -238:
						break;
					case 245:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -239:
						break;
					case 246:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -240:
						break;
					case 247:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -241:
						break;
					case 248:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -242:
						break;
					case 249:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -243:
						break;
					case 250:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -244:
						break;
					case 251:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -245:
						break;
					case 252:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -246:
						break;
					case 254:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -247:
						break;
					case 256:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -248:
						break;
					case 258:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -249:
						break;
					case 260:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -250:
						break;
					case 262:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -251:
						break;
					case 264:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -252:
						break;
					case 266:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -253:
						break;
					case 267:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -254:
						break;
					case 268:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -255:
						break;
					case 269:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -256:
						break;
					case 270:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -257:
						break;
					case 271:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -258:
						break;
					case 272:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -259:
						break;
					case 273:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -260:
						break;
					case 274:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -261:
						break;
					case 275:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -262:
						break;
					case 276:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -263:
						break;
					case 277:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -264:
						break;
					case 278:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -265:
						break;
					case 279:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -266:
						break;
					case 280:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -267:
						break;
					case 281:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -268:
						break;
					case 282:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -269:
						break;
					case 283:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -270:
						break;
					case 284:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -271:
						break;
					case 285:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -272:
						break;
					case 286:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -273:
						break;
					case 287:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -274:
						break;
					case 288:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -275:
						break;
					case 289:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -276:
						break;
					case 290:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -277:
						break;
					case 291:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -278:
						break;
					case 292:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -279:
						break;
					case 293:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -280:
						break;
					case 294:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -281:
						break;
					case 295:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -282:
						break;
					case 296:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -283:
						break;
					case 297:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -284:
						break;
					case 298:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -285:
						break;
					case 299:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -286:
						break;
					case 300:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -287:
						break;
					case 301:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -288:
						break;
					case 302:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -289:
						break;
					case 303:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -290:
						break;
					case 304:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -291:
						break;
					case 305:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -292:
						break;
					case 306:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -293:
						break;
					case 307:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -294:
						break;
					case 308:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -295:
						break;
					case 309:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -296:
						break;
					case 310:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -297:
						break;
					case 311:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -298:
						break;
					case 312:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -299:
						break;
					case 313:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -300:
						break;
					case 314:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -301:
						break;
					case 315:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -302:
						break;
					case 316:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -303:
						break;
					case 317:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -304:
						break;
					case 318:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -305:
						break;
					case 319:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -306:
						break;
					case 320:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -307:
						break;
					case 321:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -308:
						break;
					case 322:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -309:
						break;
					case 323:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -310:
						break;
					case 324:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -311:
						break;
					case 325:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -312:
						break;
					case 326:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -313:
						break;
					case 327:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -314:
						break;
					case 328:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -315:
						break;
					case 329:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -316:
						break;
					case 330:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -317:
						break;
					case 331:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -318:
						break;
					case 332:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -319:
						break;
					case 333:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -320:
						break;
					case 334:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -321:
						break;
					case 335:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -322:
						break;
					case 336:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -323:
						break;
					case 337:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -324:
						break;
					case 338:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -325:
						break;
					case 339:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -326:
						break;
					case 340:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -327:
						break;
					case 341:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -328:
						break;
					case 342:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -329:
						break;
					case 343:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -330:
						break;
					case 344:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -331:
						break;
					case 345:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -332:
						break;
					case 346:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -333:
						break;
					case 347:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -334:
						break;
					case 348:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -335:
						break;
					case 349:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -336:
						break;
					case 350:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -337:
						break;
					case 351:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -338:
						break;
					case 352:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -339:
						break;
					case 353:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -340:
						break;
					case 354:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -341:
						break;
					case 355:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -342:
						break;
					case 356:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -343:
						break;
					case 357:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -344:
						break;
					case 358:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -345:
						break;
					case 359:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -346:
						break;
					case 360:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -347:
						break;
					case 361:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -348:
						break;
					case 362:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -349:
						break;
					case 363:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -350:
						break;
					case 364:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -351:
						break;
					case 365:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -352:
						break;
					case 366:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -353:
						break;
					case 367:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -354:
						break;
					case 368:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -355:
						break;
					case 369:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -356:
						break;
					case 370:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -357:
						break;
					case 371:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -358:
						break;
					case 372:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -359:
						break;
					case 373:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -360:
						break;
					case 374:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -361:
						break;
					case 375:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -362:
						break;
					case 376:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -363:
						break;
					case 378:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -364:
						break;
					case 379:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -365:
						break;
					case 380:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -366:
						break;
					case 381:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -367:
						break;
					case 382:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -368:
						break;
					case 383:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -369:
						break;
					case 384:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -370:
						break;
					case 385:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -371:
						break;
					case 386:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -372:
						break;
					case 387:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -373:
						break;
					case 388:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -374:
						break;
					case 389:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -375:
						break;
					case 390:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -376:
						break;
					case 391:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -377:
						break;
					case 392:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -378:
						break;
					case 393:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -379:
						break;
					case 394:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -380:
						break;
					case 395:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -381:
						break;
					case 396:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -382:
						break;
					case 397:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -383:
						break;
					case 398:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -384:
						break;
					case 400:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -385:
						break;
					case 401:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -386:
						break;
					case 402:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -387:
						break;
					case 403:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -388:
						break;
					case 404:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -389:
						break;
					case 405:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -390:
						break;
					case 406:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -391:
						break;
					case 407:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -392:
						break;
					case 408:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -393:
						break;
					case 409:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -394:
						break;
					case 410:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -395:
						break;
					case 411:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -396:
						break;
					case 412:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -397:
						break;
					case 413:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -398:
						break;
					case 414:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -399:
						break;
					case 415:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -400:
						break;
					case 416:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -401:
						break;
					case 417:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -402:
						break;
					case 418:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -403:
						break;
					case 419:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -404:
						break;
					case 420:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -405:
						break;
					case 421:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -406:
						break;
					case 422:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -407:
						break;
					case 423:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -408:
						break;
					case 424:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -409:
						break;
					case 425:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -410:
						break;
					case 426:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -411:
						break;
					case 427:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -412:
						break;
					case 428:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -413:
						break;
					case 429:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -414:
						break;
					case 430:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -415:
						break;
					case 431:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -416:
						break;
					case 432:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -417:
						break;
					case 434:
						{ return new Symbol(sym.IDENT, yytext()); }
					case -418:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
