domain market_domain {
  
	requirements = { 
		reward-deterministic,
		partially-observed
	};
	
	types {
  		operation : object;
  		enum_level : {@low , @medium , @high };
	};
      
	pvariables {
		REBOOT-PROB : { non-fluent, real, default = 0.1 };
		OBSERV-PROB : { non-fluent, real, default = 0.95 };

		CONNECTED(operation, operation) : { non-fluent, bool, default = false };

		running(enum_level) : { state-fluent, bool, default = false };

		running-obs(operation) : { observ-fluent, bool };
      
		reboot(operation) : { action-fluent, bool, default = false };
	};
	
	cpfs {
		running'(?x) = if (reboot(?x))
						then Bernoulli(1 - REBOOT-PROB)
						else Bernoulli(REBOOT-PROB);
            	
		running-obs(?x) = if (running'(?x))
							then Bernoulli(OBSERV-PROB) 
							else Bernoulli(1 - OBSERV-PROB);
	};
  
	reward = sum_{?c : operation} [running(?c) - (0.1 * reboot(?c))];
}
